{"ast":null,"code":"import { createMachine, assign } from 'xstate';\nexport const carouselMachine = createMachine({\n  id: 'carousel',\n  initial: 'load',\n  states: {\n    load: {\n      invoke: {\n        src: 'loadImages',\n        onDone: [{\n          target: 'stop',\n          actions: 'assignImages'\n        }]\n      }\n    },\n    go: {\n      after: {\n        1000: {\n          target: 'stop',\n          actions: 'nextImage'\n        }\n      }\n    },\n    stop: {\n      after: {\n        6000: {\n          target: 'go',\n          actions: 'assignImage'\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    // load initial images\n    assignImages: assign((context, event) => {\n      const images = event.data;\n      if (!images) return;\n      return {\n        images,\n        index: 0,\n        first: images[0],\n        second: images[1]\n      };\n    }),\n    // assign first and second image\n    assignImage: assign(context => {\n      const {\n        images,\n        index\n      } = context;\n      if (!images) return;\n      const first = images[index % images.length];\n      const second = images[(index + 1) % images.length];\n      return {\n        first,\n        second,\n        running: true,\n        // increment index here\n        index: index + 1\n      };\n    }),\n    // move second image into first position\n    nextImage: assign(context => {\n      const {\n        images,\n        index\n      } = context;\n      if (!images) return;\n      const first = images[index % images.length];\n      return {\n        first,\n        running: false\n      };\n    })\n  }\n});","map":{"version":3,"names":["createMachine","assign","carouselMachine","id","initial","states","load","invoke","src","onDone","target","actions","go","after","stop","assignImages","context","event","images","data","index","first","second","assignImage","length","running","nextImage"],"sources":["/home/miltonejones/projects/state-cast/src/machines/carouselMachine.js"],"sourcesContent":["import { createMachine, assign } from 'xstate';\r\n\r\nexport const carouselMachine = createMachine(\r\n  {\r\n    id: 'carousel',\r\n    initial: 'load',\r\n    states: {\r\n      load: {\r\n        invoke: {\r\n          src: 'loadImages',\r\n          onDone: [\r\n            {\r\n              target: 'stop',\r\n              actions: 'assignImages',\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      go: {\r\n        after: {\r\n          1000: {\r\n            target: 'stop',\r\n            actions: 'nextImage',\r\n          },\r\n        },\r\n      },\r\n      stop: {\r\n        after: {\r\n          6000: {\r\n            target: 'go',\r\n            actions: 'assignImage',\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    actions: {\r\n      // load initial images\r\n      assignImages: assign((context, event) => {\r\n        const images = event.data;\r\n        if (!images) return;\r\n        return {\r\n          images,\r\n          index: 0,\r\n          first: images[0],\r\n          second: images[1],\r\n        };\r\n      }),\r\n      // assign first and second image\r\n      assignImage: assign((context) => {\r\n        const { images, index } = context;\r\n        if (!images) return;\r\n        const first = images[index % images.length];\r\n        const second = images[(index + 1) % images.length];\r\n        return {\r\n          first,\r\n          second,\r\n          running: true,\r\n          // increment index here\r\n          index: index + 1,\r\n        };\r\n      }),\r\n      // move second image into first position\r\n      nextImage: assign((context) => {\r\n        const { images, index } = context;\r\n        if (!images) return;\r\n        const first = images[index % images.length];\r\n        return {\r\n          first,\r\n          running: false,\r\n        };\r\n      }),\r\n    },\r\n  }\r\n);\r\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,MAAM,QAAQ,QAAQ;AAE9C,OAAO,MAAMC,eAAe,GAAGF,aAAa,CAC1C;EACEG,EAAE,EAAE,UAAU;EACdC,OAAO,EAAE,MAAM;EACfC,MAAM,EAAE;IACNC,IAAI,EAAE;MACJC,MAAM,EAAE;QACNC,GAAG,EAAE,YAAY;QACjBC,MAAM,EAAE,CACN;UACEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;QACX,CAAC;MAEL;IACF,CAAC;IACDC,EAAE,EAAE;MACFC,KAAK,EAAE;QACL,IAAI,EAAE;UACJH,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;QACX;MACF;IACF,CAAC;IACDG,IAAI,EAAE;MACJD,KAAK,EAAE;QACL,IAAI,EAAE;UACJH,MAAM,EAAE,IAAI;UACZC,OAAO,EAAE;QACX;MACF;IACF;EACF;AACF,CAAC,EACD;EACEA,OAAO,EAAE;IACP;IACAI,YAAY,EAAEd,MAAM,CAAC,CAACe,OAAO,EAAEC,KAAK,KAAK;MACvC,MAAMC,MAAM,GAAGD,KAAK,CAACE,IAAI;MACzB,IAAI,CAACD,MAAM,EAAE;MACb,OAAO;QACLA,MAAM;QACNE,KAAK,EAAE,CAAC;QACRC,KAAK,EAAEH,MAAM,CAAC,CAAC,CAAC;QAChBI,MAAM,EAAEJ,MAAM,CAAC,CAAC;MAClB,CAAC;IACH,CAAC,CAAC;IACF;IACAK,WAAW,EAAEtB,MAAM,CAAEe,OAAO,IAAK;MAC/B,MAAM;QAAEE,MAAM;QAAEE;MAAM,CAAC,GAAGJ,OAAO;MACjC,IAAI,CAACE,MAAM,EAAE;MACb,MAAMG,KAAK,GAAGH,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACM,MAAM,CAAC;MAC3C,MAAMF,MAAM,GAAGJ,MAAM,CAAC,CAACE,KAAK,GAAG,CAAC,IAAIF,MAAM,CAACM,MAAM,CAAC;MAClD,OAAO;QACLH,KAAK;QACLC,MAAM;QACNG,OAAO,EAAE,IAAI;QACb;QACAL,KAAK,EAAEA,KAAK,GAAG;MACjB,CAAC;IACH,CAAC,CAAC;IACF;IACAM,SAAS,EAAEzB,MAAM,CAAEe,OAAO,IAAK;MAC7B,MAAM;QAAEE,MAAM;QAAEE;MAAM,CAAC,GAAGJ,OAAO;MACjC,IAAI,CAACE,MAAM,EAAE;MACb,MAAMG,KAAK,GAAGH,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACM,MAAM,CAAC;MAC3C,OAAO;QACLH,KAAK;QACLI,OAAO,EAAE;MACX,CAAC;IACH,CAAC;EACH;AACF,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}